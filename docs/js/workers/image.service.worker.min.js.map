{"version":3,"sources":["src/js/image/image.service.worker.js","../../../src/js/image/image.service.worker.js"],"names":["f","define","amd","controllers","resize","src","blob","size","self","createImageBitmap","OffscreenCanvas","response","then","img","width","height","canvas","ctx","getContext","drawImage","convertToBlob","type","quality","resizedBlob","postMessage","addEventListener","event","id","data","options","fetch","AbortController","controller","signal","error","console","log","request","XMLHttpRequest","open","responseType","onload","status","onerror","send","abort"],"mappings":";;;;;CAMC,SAASA,GAAmB,mBAATC,QAAqBA,OAAOC,IAAID,OAAOD,GAAGA,IAA9D,EAAoE,WAAY,aCNhF,IAAMG,EAAc,GAEpB,SAASC,EAAOC,EAAKC,EAAMC,GAC1B,IAAKC,KAAKC,oBAAsBD,KAAKE,gBACpC,OAAOC,EAASN,EAAKC,GAEtBE,KAAKC,kBAAkBH,GAAMM,MAAK,SAASC,GAC1C,IAEIC,EAAQD,EAAIC,MACZC,EAASF,EAAIE,OACbD,EAAQC,EACPD,EALa,MAMhBC,GANgB,IAMMD,EACtBA,EAPgB,KAUbC,EATc,MAUjBD,GAViB,IAUKC,EACtBA,EAXiB,KAcnB,IAAMC,EAAS,IAAIN,gBAAgBI,EAAOC,GACpCE,EAAMD,EAAOE,WAAW,MAC9BF,EAAOF,MAAQA,EACfE,EAAOD,OAASA,EAChBE,EAAIE,UAAUN,EAAK,EAAG,EAAGC,EAAOC,GAChCC,EAAOI,cAAc,CAAEC,KAAM,aAAcC,QAAS,KAAOV,MAAK,SAASW,GACxEZ,EAASN,EAAKkB,SAKjB,SAASZ,EAASN,EAAKC,GACtBE,KAAKgB,YAAY,CAChBnB,IAAKA,EACLC,KAAMA,IAIRE,KAAKiB,iBAAiB,WAAW,SAASC,GACzC,IAAMC,EAAKD,EAAME,KAAKD,GAChBtB,EAAMqB,EAAME,KAAKvB,IACjBE,EAAOmB,EAAME,KAAKrB,KACxB,IAAIoB,GAAOtB,EAAX,CAQA,IAAIwB,EACJ,GAAqB,mBAAVC,MAAsB,CAChC,GAAItB,KAAKuB,gBAAiB,CACzB,IAAMC,EAAa,IAAID,gBACvBF,EAAU,CACTI,OAAQD,EAAWC,QAEpB9B,EAAYwB,GAAMK,EAGnB,IAAMrB,EAAWmB,MAAMzB,EAAKwB,GAC1BjB,MAAK,SAASD,GACd,OAAOA,EAASL,UACd,SAAS4B,GACXC,QAAQC,IAAIF,MAEZtB,MAAK,SAASN,UACPH,EAAYwB,GACC,iBAATpB,EACVH,EAAOC,EAAKC,GAEZK,EAASN,EAAKC,MAEb,SAAS4B,GACXC,QAAQC,IAAIF,UAER,CACN,IAAMG,EAAU,IAAIC,eACpBD,EAAQE,KAAK,MAAOlC,GACpBgC,EAAQG,aAAe,OACvBH,EAAQI,OAAS,WACZJ,EAAQK,OAAS,MACA,iBAATnC,EACVH,EAAOC,EAAKC,MAEZK,EAASN,EAAKC,QAMjB+B,EAAQM,QAAU,aAGlBN,EAAQO,YApDT,CACC,IAAMZ,EAAa7B,EAAYwB,GAC3BK,GAEHA,EAAWa","file":"docs\\js\\workers\\image.service.worker.min.js","sourcesContent":[null,"const controllers = {};\n\nfunction resize(src, blob, size) {\n\tif (!self.createImageBitmap || !self.OffscreenCanvas) {\n\t\treturn response(src, blob);\n\t}\n\tself.createImageBitmap(blob).then(function(img) {\n\t\tconst MAX_WIDTH = 320;\n\t\tconst MAX_HEIGHT = 240;\n\t\tlet width = img.width;\n\t\tlet height = img.height;\n\t\tif (width > height) {\n\t\t\tif (width > MAX_WIDTH) {\n\t\t\t\theight *= MAX_WIDTH / width;\n\t\t\t\twidth = MAX_WIDTH;\n\t\t\t}\n\t\t} else {\n\t\t\tif (height > MAX_HEIGHT) {\n\t\t\t\twidth *= MAX_HEIGHT / height;\n\t\t\t\theight = MAX_HEIGHT;\n\t\t\t}\n\t\t}\n\t\tconst canvas = new OffscreenCanvas(width, height);\n\t\tconst ctx = canvas.getContext('2d');\n\t\tcanvas.width = width;\n\t\tcanvas.height = height;\n\t\tctx.drawImage(img, 0, 0, width, height);\n\t\tcanvas.convertToBlob({ type: 'image/jpeg', quality: 0.9 }).then(function(resizedBlob) {\n\t\t\tresponse(src, resizedBlob);\n\t\t});\n\t});\n}\n\nfunction response(src, blob) {\n\tself.postMessage({\n\t\tsrc: src,\n\t\tblob: blob\n\t});\n}\n\nself.addEventListener('message', function(event) {\n\tconst id = event.data.id;\n\tconst src = event.data.src;\n\tconst size = event.data.size;\n\tif (id && !src) {\n\t\tconst controller = controllers[id];\n\t\tif (controller) {\n\t\t\t// console.log('Aborting', id);\n\t\t\tcontroller.abort();\n\t\t}\n\t\treturn;\n\t}\n\tlet options;\n\tif (typeof fetch === 'function') {\n\t\tif (self.AbortController) {\n\t\t\tconst controller = new AbortController();\n\t\t\toptions = {\n\t\t\t\tsignal: controller.signal,\n\t\t\t};\n\t\t\tcontrollers[id] = controller;\n\t\t\t// console.log('AbortController', id);\n\t\t}\n\t\tconst response = fetch(src, options)\n\t\t\t.then(function(response) {\n\t\t\t\treturn response.blob();\n\t\t\t}, function(error) {\n\t\t\t\tconsole.log(error);\n\t\t\t})\n\t\t\t.then(function(blob) {\n\t\t\t\tdelete controllers[id];\n\t\t\t\tif (typeof size === 'object') {\n\t\t\t\t\tresize(src, blob, size);\n\t\t\t\t} else {\n\t\t\t\t\tresponse(src, blob);\n\t\t\t\t}\n\t\t\t}, function(error) {\n\t\t\t\tconsole.log(error);\n\t\t\t});\n\t} else {\n\t\tconst request = new XMLHttpRequest();\n\t\trequest.open('GET', src);\n\t\trequest.responseType = 'blob';\n\t\trequest.onload = function() {\n\t\t\tif (request.status < 300) {\n\t\t\t\tif (typeof size === 'object') {\n\t\t\t\t\tresize(src, blob, size);\n\t\t\t\t} else {\n\t\t\t\t\tresponse(src, blob);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// new Error('Image didn\\'t load successfully; error code:' + request.statusText);\n\t\t\t}\n\t\t};\n\t\trequest.onerror = function() {\n\t\t\t// new Error('There was a network error.');\n\t\t};\n\t\trequest.send();\n\t}\n});\n\n/*\nself.addEventListener('message', function(event) {\n\t// console.log(event);\n\tconst src = event.data;\n\tconst response = fetch(src).then(function(response) {\n\t\treturn response.blob();\n\t}).then(function(blob) {\n\t\t// Send the image data to the UI thread!\n\t\tself.postMessage({\n\t\t\tsrc: src,\n\t\t\tblob: blob,\n\t\t});\n\t});\n});\n*/\n"]}